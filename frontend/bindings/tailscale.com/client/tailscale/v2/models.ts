// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../../time/models.js";

export class ClientConnectivity {
    "endpoints": string[];
    "derp": string;
    "mappingVariesByDestIP": boolean;

    /**
     * DERPLatency is mapped by region name (e.g. "New York City", "Seattle").
     */
    "latency": { [_: string]: DERPRegion };
    "clientSupports": ClientSupports;

    /** Creates a new ClientConnectivity instance. */
    constructor($$source: Partial<ClientConnectivity> = {}) {
        if (!("endpoints" in $$source)) {
            this["endpoints"] = [];
        }
        if (!("derp" in $$source)) {
            this["derp"] = "";
        }
        if (!("mappingVariesByDestIP" in $$source)) {
            this["mappingVariesByDestIP"] = false;
        }
        if (!("latency" in $$source)) {
            this["latency"] = {};
        }
        if (!("clientSupports" in $$source)) {
            this["clientSupports"] = (new ClientSupports());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ClientConnectivity instance from a string or object.
     */
    static createFrom($$source: any = {}): ClientConnectivity {
        const $$createField0_0 = $$createType0;
        const $$createField3_0 = $$createType2;
        const $$createField4_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("endpoints" in $$parsedSource) {
            $$parsedSource["endpoints"] = $$createField0_0($$parsedSource["endpoints"]);
        }
        if ("latency" in $$parsedSource) {
            $$parsedSource["latency"] = $$createField3_0($$parsedSource["latency"]);
        }
        if ("clientSupports" in $$parsedSource) {
            $$parsedSource["clientSupports"] = $$createField4_0($$parsedSource["clientSupports"]);
        }
        return new ClientConnectivity($$parsedSource as Partial<ClientConnectivity>);
    }
}

export class ClientSupports {
    "hairPinning": boolean;
    "ipv6": boolean;
    "pcp": boolean;
    "pmp": boolean;
    "udp": boolean;
    "upnp": boolean;

    /** Creates a new ClientSupports instance. */
    constructor($$source: Partial<ClientSupports> = {}) {
        if (!("hairPinning" in $$source)) {
            this["hairPinning"] = false;
        }
        if (!("ipv6" in $$source)) {
            this["ipv6"] = false;
        }
        if (!("pcp" in $$source)) {
            this["pcp"] = false;
        }
        if (!("pmp" in $$source)) {
            this["pmp"] = false;
        }
        if (!("udp" in $$source)) {
            this["udp"] = false;
        }
        if (!("upnp" in $$source)) {
            this["upnp"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ClientSupports instance from a string or object.
     */
    static createFrom($$source: any = {}): ClientSupports {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ClientSupports($$parsedSource as Partial<ClientSupports>);
    }
}

export class DERPRegion {
    "preferred"?: boolean;
    "latencyMs": number;

    /** Creates a new DERPRegion instance. */
    constructor($$source: Partial<DERPRegion> = {}) {
        if (!("latencyMs" in $$source)) {
            this["latencyMs"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DERPRegion instance from a string or object.
     */
    static createFrom($$source: any = {}): DERPRegion {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new DERPRegion($$parsedSource as Partial<DERPRegion>);
    }
}

export class Device {
    "addresses": string[];
    "name": string;

    /**
     * The legacy identifier for a device. Use NodeId instead.
     */
    "id": string;

    /**
     * The preferred identifier for a device.
     */
    "nodeId": string;
    "authorized": boolean;
    "user": string;
    "tags": string[];
    "keyExpiryDisabled": boolean;
    "blocksIncomingConnections": boolean;
    "clientVersion": string;
    "created": Time;
    "expires": Time;
    "hostname": string;
    "isExternal": boolean;
    "lastSeen": Time;
    "machineKey": string;
    "nodeKey": string;
    "os": string;
    "tailnetLockError": string;
    "tailnetLockKey": string;
    "updateAvailable": boolean;

    /**
     * The below are only included in listings when querying `all` fields.
     */
    "AdvertisedRoutes": string[];
    "enabledRoutes": string[];
    "clientConnectivity": ClientConnectivity | null;

    /** Creates a new Device instance. */
    constructor($$source: Partial<Device> = {}) {
        if (!("addresses" in $$source)) {
            this["addresses"] = [];
        }
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("id" in $$source)) {
            this["id"] = "";
        }
        if (!("nodeId" in $$source)) {
            this["nodeId"] = "";
        }
        if (!("authorized" in $$source)) {
            this["authorized"] = false;
        }
        if (!("user" in $$source)) {
            this["user"] = "";
        }
        if (!("tags" in $$source)) {
            this["tags"] = [];
        }
        if (!("keyExpiryDisabled" in $$source)) {
            this["keyExpiryDisabled"] = false;
        }
        if (!("blocksIncomingConnections" in $$source)) {
            this["blocksIncomingConnections"] = false;
        }
        if (!("clientVersion" in $$source)) {
            this["clientVersion"] = "";
        }
        if (!("created" in $$source)) {
            this["created"] = null;
        }
        if (!("expires" in $$source)) {
            this["expires"] = null;
        }
        if (!("hostname" in $$source)) {
            this["hostname"] = "";
        }
        if (!("isExternal" in $$source)) {
            this["isExternal"] = false;
        }
        if (!("lastSeen" in $$source)) {
            this["lastSeen"] = null;
        }
        if (!("machineKey" in $$source)) {
            this["machineKey"] = "";
        }
        if (!("nodeKey" in $$source)) {
            this["nodeKey"] = "";
        }
        if (!("os" in $$source)) {
            this["os"] = "";
        }
        if (!("tailnetLockError" in $$source)) {
            this["tailnetLockError"] = "";
        }
        if (!("tailnetLockKey" in $$source)) {
            this["tailnetLockKey"] = "";
        }
        if (!("updateAvailable" in $$source)) {
            this["updateAvailable"] = false;
        }
        if (!("AdvertisedRoutes" in $$source)) {
            this["AdvertisedRoutes"] = [];
        }
        if (!("enabledRoutes" in $$source)) {
            this["enabledRoutes"] = [];
        }
        if (!("clientConnectivity" in $$source)) {
            this["clientConnectivity"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Device instance from a string or object.
     */
    static createFrom($$source: any = {}): Device {
        const $$createField0_0 = $$createType0;
        const $$createField6_0 = $$createType0;
        const $$createField21_0 = $$createType0;
        const $$createField22_0 = $$createType0;
        const $$createField23_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("addresses" in $$parsedSource) {
            $$parsedSource["addresses"] = $$createField0_0($$parsedSource["addresses"]);
        }
        if ("tags" in $$parsedSource) {
            $$parsedSource["tags"] = $$createField6_0($$parsedSource["tags"]);
        }
        if ("AdvertisedRoutes" in $$parsedSource) {
            $$parsedSource["AdvertisedRoutes"] = $$createField21_0($$parsedSource["AdvertisedRoutes"]);
        }
        if ("enabledRoutes" in $$parsedSource) {
            $$parsedSource["enabledRoutes"] = $$createField22_0($$parsedSource["enabledRoutes"]);
        }
        if ("clientConnectivity" in $$parsedSource) {
            $$parsedSource["clientConnectivity"] = $$createField23_0($$parsedSource["clientConnectivity"]);
        }
        return new Device($$parsedSource as Partial<Device>);
    }
}

/**
 * Time wraps a time and allows for unmarshalling timestamps that represent an empty time as an empty string (e.g "")
 * this is used by the tailscale API when it returns devices that have no created date, such as its hello service.
 */
export type Time = any;

/**
 * User is a representation of a user within a tailnet.
 */
export class User {
    "id": string;
    "displayName": string;
    "loginName": string;
    "profilePicUrl": string;
    "tailnetId": string;
    "created": time$0.Time;
    "type": UserType;
    "role": UserRole;
    "status": UserStatus;
    "deviceCount": number;
    "lastSeen": time$0.Time;
    "currentlyConnected": boolean;

    /** Creates a new User instance. */
    constructor($$source: Partial<User> = {}) {
        if (!("id" in $$source)) {
            this["id"] = "";
        }
        if (!("displayName" in $$source)) {
            this["displayName"] = "";
        }
        if (!("loginName" in $$source)) {
            this["loginName"] = "";
        }
        if (!("profilePicUrl" in $$source)) {
            this["profilePicUrl"] = "";
        }
        if (!("tailnetId" in $$source)) {
            this["tailnetId"] = "";
        }
        if (!("created" in $$source)) {
            this["created"] = null;
        }
        if (!("type" in $$source)) {
            this["type"] = ("" as UserType);
        }
        if (!("role" in $$source)) {
            this["role"] = ("" as UserRole);
        }
        if (!("status" in $$source)) {
            this["status"] = ("" as UserStatus);
        }
        if (!("deviceCount" in $$source)) {
            this["deviceCount"] = 0;
        }
        if (!("lastSeen" in $$source)) {
            this["lastSeen"] = null;
        }
        if (!("currentlyConnected" in $$source)) {
            this["currentlyConnected"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new User instance from a string or object.
     */
    static createFrom($$source: any = {}): User {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new User($$parsedSource as Partial<User>);
    }
}

/**
 * UserRole is the role of the user.
 */
export enum UserRole {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    UserRoleOwner = "owner",
    UserRoleMember = "member",
    UserRoleAdmin = "admin",
    UserRoleITAdmin = "it-admin",
    UserRoleNetworkAdmin = "network-admin",
    UserRoleBillingAdmin = "billing-admin",
    UserRoleAuditor = "auditor",
};

/**
 * UserStatus is the status of the user.
 */
export enum UserStatus {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    UserStatusActive = "active",
    UserStatusIdle = "idle",
    UserStatusSuspended = "suspended",
    UserStatusNeedsApproval = "needs-approval",
    UserStatusOverBillingLimit = "over-billing-limit",
};

/**
 * UserType is the type of relation this user has to the tailnet associated with the request.
 */
export enum UserType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    UserTypeMember = "member",
    UserTypeShared = "shared",
};

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = DERPRegion.createFrom;
const $$createType2 = $Create.Map($Create.Any, $$createType1);
const $$createType3 = ClientSupports.createFrom;
const $$createType4 = ClientConnectivity.createFrom;
const $$createType5 = $Create.Nullable($$createType4);
